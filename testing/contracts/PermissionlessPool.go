// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PermissionlessPoolMetaData contains all meta data concerning the PermissionlessPool contract.
var PermissionlessPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staderConfig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotStaderContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CouldNotDetermineExcessETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedCollateralETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedInsuranceFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferredETHToSSPMForDefectiveKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedCommissionFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staderConfig\",\"type\":\"address\"}],\"name\":\"UpdatedStaderConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorDepositedOnBeaconChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorPreDepositedOnBeaconChain\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_NODE_BOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMMISSION_LIMIT_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawCredential\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"computeDepositDataRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"getOperatorTotalNonTerminalKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSocializingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalActiveValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalQueuedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operAddr\",\"type\":\"address\"}],\"name\":\"isExistingOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"}],\"name\":\"isExistingPubkey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_pubkey\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_preDepositSignature\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorTotalKeys\",\"type\":\"uint256\"}],\"name\":\"preDepositOnBeaconChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveRemainingCollateralETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorFee\",\"type\":\"uint256\"}],\"name\":\"setCommissionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staderConfig\",\"outputs\":[{\"internalType\":\"contractIStaderConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeUserETHToBeaconChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staderConfig\",\"type\":\"address\"}],\"name\":\"updateStaderConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801562000010575f80fd5b5060405162003044380380620030448339810160408190526200003391620003ae565b5f54610100900460ff16158080156200005257505f54600160ff909116105b806200006d5750303b1580156200006d57505f5460ff166001145b620000d65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b5f805460ff191660011790558015620000f8575f805461ff0019166101001790555b6200010383620001a3565b6200010e82620001a3565b62000118620001ce565b620001226200022a565b6101f460ca81905560cb5560c980546001600160a01b0319166001600160a01b038416179055620001545f846200028e565b80156200019a575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050620003e4565b6001600160a01b038116620001cb5760405163d92e233d60e01b815260040160405180910390fd5b50565b5f54610100900460ff16620002285760405162461bcd60e51b815260206004820152602b60248201525f805160206200302483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000cd565b565b5f54610100900460ff16620002845760405162461bcd60e51b815260206004820152602b60248201525f805160206200302483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000cd565b6200022862000331565b5f8281526065602090815260408083206001600160a01b038516845290915290205460ff166200032d575f8281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002ec3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f54610100900460ff166200038b5760405162461bcd60e51b815260206004820152602b60248201525f805160206200302483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000cd565b6001609755565b80516001600160a01b0381168114620003a9575f80fd5b919050565b5f8060408385031215620003c0575f80fd5b620003cb8362000392565b9150620003db6020840162000392565b90509250929050565b612c3280620003f25f395ff3fe608060405260043610610184575f3560e01c80638a25bcec116100d0578063b01db07811610089578063d547741f11610063578063d547741f14610429578063eda0ae1214610448578063f74b4cd11461045b578063f9c4dda41461046f576101a2565b8063b01db078146103ec578063b0e21e8a14610400578063b6fb3fac14610415576101a2565b80638a25bcec1461035f57806391d148541461037e5780639b26728e1461039d5780639cd6dd56146103a55780639ee804cb146103ba578063a217fddf146103d9576101a2565b806336514d9f1161013d5780635c164e53116101175780635c164e531461030357806377c359e1146103225780637bd977d91461033657806389afc0f11461034a576101a2565b806336514d9f1461028e57806336568abe146102ad578063490ffa35146102cc576101a2565b806301ffc9a7146101bb5780631f033ef0146101ef57806321066d18146101f9578063248a9ca31461021857806324f69706146102545780632f2ff15d1461026f576101a2565b366101a257604051639ba6061b60e01b815260040160405180910390fd5b604051639ba6061b60e01b815260040160405180910390fd5b3480156101c6575f80fd5b506101da6101d5366004612359565b61048e565b60405190151581526020015b60405180910390f35b6101f76104c4565b005b348015610204575f80fd5b506101f7610213366004612380565b610571565b348015610223575f80fd5b506102466102323660046123a0565b5f9081526065602052604090206001015490565b6040519081526020016101e6565b34801561025f575f80fd5b506102466729a2241af62c000081565b34801561027a575f80fd5b506101f76102893660046123cb565b6105fc565b348015610299575f80fd5b506101da6102a836600461243e565b610625565b3480156102b8575f80fd5b506101f76102c73660046123cb565b610703565b3480156102d7575f80fd5b5060c9546102eb906001600160a01b031681565b6040516001600160a01b0390911681526020016101e6565b34801561030e575f80fd5b5061024661031d36600461247d565b610786565b34801561032d575f80fd5b50610246610ac1565b348015610341575f80fd5b50610246610b90565b348015610355575f80fd5b5061024660cb5481565b34801561036a575f80fd5b50610246610379366004612518565b610c36565b348015610389575f80fd5b506101da6103983660046123cb565b610d2b565b6101f7610d55565b3480156103b0575f80fd5b506102466105dc81565b3480156103c5575f80fd5b506101f76103d436600461254a565b611246565b3480156103e4575f80fd5b506102465f81565b3480156103f7575f80fd5b506102466112a7565b34801561040b575f80fd5b5061024660ca5481565b348015610420575f80fd5b506102eb61134d565b348015610434575f80fd5b506101f76104433660046123cb565b6113b8565b6101f76104563660046125a6565b6113dc565b348015610466575f80fd5b506102eb6119a0565b34801561047a575f80fd5b506101da61048936600461254a565b6119e7565b5f6001600160e01b03198216637965db0b60e01b14806104be57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60c95460408051630a9548ed60e11b8152905161053c9233926001600160a01b0390911691829163152a91da9160048083019260209291908290030181865afa158015610513573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610537919061261e565b611abc565b6040513481527f3726a70cbf9252aacb06774b2f9f7108d837fc60afd7143f86eec77d7e3da94b9060200160405180910390a1565b60c9546105889033906001600160a01b0316611b48565b6105dc6105958284612649565b11156105b45760405163dc81db8560e01b815260040160405180910390fd5b60ca82905560cb81905560408051838152602081018390527fe8525a7862504bbe091b0440fe96979769664cae1625591ff0a9816512a5287b91015b60405180910390a15050565b5f8281526065602052604090206001015461061681611bcd565b6106208383611bda565b505050565b60c95460408051630d80dd2960e21b815290515f926001600160a01b03169163360374a49160048083019260209291908290030181865afa15801561066c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610690919061266c565b6001600160a01b03166336514d9f84846040518363ffffffff1660e01b81526004016106bd9291906126af565b602060405180830381865afa1580156106d8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106fc91906126ca565b9392505050565b6001600160a01b03811633146107785760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107828282611c5f565b5050565b5f8061079183611cc5565b90505f60028a8a5f60801b6040516020016107ae939291906126e9565b60408051601f19818403018152908290526107c891612732565b602060405180830381855afa1580156107e3573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610806919061261e565b90505f6002806108196040848c8e61274d565b60405160200161082a929190612774565b60408051601f198184030181529082905261084491612732565b602060405180830381855afa15801561085f573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610882919061261e565b60026108918b6040818f61274d565b6040516108a49291905f90602001612783565b60408051601f19818403018152908290526108be91612732565b602060405180830381855afa1580156108d9573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906108fc919061261e565b60408051602081019390935282015260600160408051601f198184030181529082905261092891612732565b602060405180830381855afa158015610943573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610966919061261e565b905060028083898960405160200161098093929190612795565b60408051601f198184030181529082905261099a91612732565b602060405180830381855afa1580156109b5573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906109d8919061261e565b6040516002906109f09087905f9087906020016127ae565b60408051601f1981840301815290829052610a0a91612732565b602060405180830381855afa158015610a25573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610a48919061261e565b60408051602081019390935282015260600160408051601f1981840301815290829052610a7491612732565b602060405180830381855afa158015610a8f573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610ab2919061261e565b9b9a5050505050505050505050565b60c95460408051630d80dd2960e21b815290515f926001600160a01b03169163360374a49160048083019260209291908290030181865afa158015610b08573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b2c919061266c565b6001600160a01b03166377c359e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b67573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b8b919061261e565b905090565b60c95460408051630d80dd2960e21b815290515f926001600160a01b03169163360374a49160048083019260209291908290030181865afa158015610bd7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bfb919061266c565b6001600160a01b0316637bd977d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b67573d5f803e3d5ffd5b60c95460408051630d80dd2960e21b815290515f926001600160a01b03169163360374a49160048083019260209291908290030181865afa158015610c7d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ca1919061266c565b6040516322896f3b60e21b81526001600160a01b03868116600483015260248201869052604482018590529190911690638a25bcec90606401602060405180830381865afa158015610cf5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d1991906127e5565b67ffffffffffffffff16949350505050565b5f9182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d5d611e81565b60c9546040805163529deeeb60e11b81529051610dac9233926001600160a01b0390911691829163a53bddd69160048083019260209291908290030181865afa158015610513573d5f803e3d5ffd5b5f6729a2241af62c000060c95f9054906101000a90046001600160a01b03166001600160a01b031663fa71fcbb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e06573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e2a919061261e565b610e34919061280c565b610e3e903461281f565b90505f60c95f9054906101000a90046001600160a01b03166001600160a01b031663360374a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e91573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eb5919061266c565b90506001600160a01b038116635ae7f25d610ed86729a2241af62c00008561283e565b6040518263ffffffff1660e01b8152600401610ef691815260200190565b5f604051808303815f87803b158015610f0d575f80fd5b505af1158015610f1f573d5f803e3d5ffd5b505050505f60c95f9054906101000a90046001600160a01b03166001600160a01b03166318bcb2846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f74573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f98919061266c565b90505f60c95f9054906101000a90046001600160a01b03166001600160a01b0316638f8b38676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610feb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061100f919061266c565b90505f836001600160a01b03166374338e6d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561104e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611072919061261e565b9050805b6110808287612649565b81101561117b5760405163bc4a3ad560e01b8152600481018290525f906001600160a01b0387169063bc4a3ad590602401602060405180830381865afa1580156110cc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110f0919061261e565b90506111728686868460c95f9054906101000a90046001600160a01b03166001600160a01b031663fa71fcbb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611149573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061116d919061261e565b611eda565b50600101611076565b506001600160a01b03841663b8d2f06c6111958784612649565b6040518263ffffffff1660e01b81526004016111b391815260200190565b5f604051808303815f87803b1580156111ca575f80fd5b505af11580156111dc573d5f803e3d5ffd5b50506040516359c3c9b760e01b8152600481018890526001600160a01b03871692506359c3c9b791506024015f604051808303815f87803b15801561121f575f80fd5b505af1158015611231573d5f803e3d5ffd5b5050505050505050506112446001609755565b565b5f61125081611bcd565b61125982612131565b60c980546001600160a01b0319166001600160a01b0384169081179091556040519081527fdb2219043d7b197cb235f1af0cf6d782d77dee3de19e3f4fb6d39aae633b4485906020016105f0565b60c95460408051630d80dd2960e21b815290515f926001600160a01b03169163360374a49160048083019260209291908290030181865afa1580156112ee573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611312919061266c565b6001600160a01b031663b01db0786040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b67573d5f803e3d5ffd5b60c95460408051630d80dd2960e21b815290515f926001600160a01b03169163360374a49160048083019260209291908290030181865afa158015611394573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b8b919061266c565b5f828152606560205260409020600101546113d281611bcd565b6106208383611c5f565b6113e4611e81565b60c95460408051630a9548ed60e11b815290516114339233926001600160a01b0390911691829163152a91da9160048083019260209291908290030181865afa158015610513573d5f803e3d5ffd5b60c9546040805163062f2ca160e21b815290515f926001600160a01b0316916318bcb2849160048083019260209291908290030181865afa15801561147a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061149e919061266c565b9050855f5b8181101561198b575f836001600160a01b03166374903b0260c95f9054906101000a90046001600160a01b03166001600160a01b031663360374a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561150b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061152f919061266c565b6001600160a01b031663e0d7d0e96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561156a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061158e9190612855565b88611599868a612649565b6040516001600160e01b031960e086901b16815260ff909316600484015260248301919091526044820152606401602060405180830381865afa1580156115e2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611606919061266c565b60405163ae4e4e4560e01b81526001600160a01b0380831660048301529192505f9186169063ae4e4e45906024015f60405180830381865afa15801561164e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611675919081019061290e565b90505f30635c164e538d8d8781811061169057611690612940565b90506020028101906116a29190612954565b8d8d898181106116b4576116b4612940565b90506020028101906116c69190612954565b60c95460408051630829764560e01b815290518a926001600160a01b03169163082976459160048083019260209291908290030181865afa15801561170d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611731919061261e565b6040518763ffffffff1660e01b8152600401611752969594939291906129c2565b602060405180830381865afa15801561176d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611791919061261e565b905060c95f9054906101000a90046001600160a01b03166001600160a01b0316638f8b38676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611807919061266c565b6001600160a01b0316632289511860c95f9054906101000a90046001600160a01b03166001600160a01b031663082976456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611865573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611889919061261e565b8e8e8881811061189b5761189b612940565b90506020028101906118ad9190612954565b868f8f8b8181106118c0576118c0612940565b90506020028101906118d29190612954565b886040518863ffffffff1660e01b81526004016118f496959493929190612a10565b5f604051808303818588803b15801561190b575f80fd5b505af115801561191d573d5f803e3d5ffd5b50505050507fa35366ad083efbaee7949ff15c68508b95e2c0441248e80d73da97ac82bc1f108c8c8681811061195557611955612940565b90506020028101906119679190612954565b6040516119759291906126af565b60405180910390a18360010193505050506114a3565b5050506119986001609755565b505050505050565b60c9546040805163051fdecd60e11b815290515f926001600160a01b031691630a3fbd9a9160048083019260209291908290030181865afa158015611394573d5f803e3d5ffd5b60c95460408051630d80dd2960e21b815290515f926001600160a01b03169163360374a49160048083019260209291908290030181865afa158015611a2e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a52919061266c565b604051633e71376960e21b81526001600160a01b038481166004830152919091169063f9c4dda490602401602060405180830381865afa158015611a98573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104be91906126ca565b6040516359891c9160e11b81526001600160a01b0384811660048301526024820183905283169063b312392290604401602060405180830381865afa158015611b07573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b2b91906126ca565b6106205760405163168dfea160e01b815260040160405180910390fd5b6040516318903ee760e21b81526001600160a01b038381166004830152821690636240fb9c90602401602060405180830381865afa158015611b8c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bb091906126ca565b6107825760405163c4230ae360e01b815260040160405180910390fd5b611bd78133612158565b50565b611be48282610d2b565b610782575f8281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c1b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c698282610d2b565b15610782575f8281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60605f611cd6633b9aca008461281f565b60408051600880825281830190925291925060208201818036833701905050915060c081901b8060071a60f81b835f81518110611d1557611d15612940565b60200101906001600160f81b03191690815f1a9053508060061a60f81b83600181518110611d4557611d45612940565b60200101906001600160f81b03191690815f1a9053508060051a60f81b83600281518110611d7557611d75612940565b60200101906001600160f81b03191690815f1a9053508060041a60f81b83600381518110611da557611da5612940565b60200101906001600160f81b03191690815f1a9053508060031a60f81b83600481518110611dd557611dd5612940565b60200101906001600160f81b03191690815f1a9053508060021a60f81b83600581518110611e0557611e05612940565b60200101906001600160f81b03191690815f1a9053508060011a60f81b83600681518110611e3557611e35612940565b60200101906001600160f81b03191690815f1a905350805f1a60f81b83600781518110611e6457611e64612940565b60200101906001600160f81b03191690815f1a9053505050919050565b600260975403611ed35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161076f565b6002609755565b5f805f876001600160a01b0316635a1239c1866040518263ffffffff1660e01b8152600401611f0b91815260200190565b5f60405180830381865afa158015611f25573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611f4c9190810190612a58565b505060405163ae4e4e4560e01b81526001600160a01b0380841660048301529599509297509095505f945050918a169163ae4e4e4591506024015f60405180830381865afa158015611fa0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611fc7919081019061290e565b604051635c164e5360e01b81529091505f903090635c164e5390611ff5908890889087908c90600401612b17565b602060405180830381865afa158015612010573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612034919061261e565b9050876001600160a01b0316632289511887878588866040518663ffffffff1660e01b81526004016120699493929190612b17565b5f604051808303818588803b158015612080575f80fd5b505af1158015612092573d5f803e3d5ffd5b505060405163186d954160e01b8152600481018b90526001600160a01b038e16935063186d9541925060240190505f604051808303815f87803b1580156120d7575f80fd5b505af11580156120e9573d5f803e3d5ffd5b50505050867fbef89de94658b7ef396ba7f9316542858c893c9011602906b1a2ad18d0a99c358660405161211d9190612b61565b60405180910390a250505050505050505050565b6001600160a01b038116611bd75760405163d92e233d60e01b815260040160405180910390fd5b6121628282610d2b565b6107825761216f816121b1565b61217a8360206121c3565b60405160200161218b929190612b73565b60408051601f198184030181529082905262461bcd60e51b825261076f91600401612b61565b60606104be6001600160a01b03831660145b60605f6121d183600261283e565b6121dc906002612649565b67ffffffffffffffff8111156121f4576121f4612875565b6040519080825280601f01601f19166020018201604052801561221e576020820181803683370190505b509050600360fc1b815f8151811061223857612238612940565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061226657612266612940565b60200101906001600160f81b03191690815f1a9053505f61228884600261283e565b612293906001612649565b90505b600181111561230a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122c7576122c7612940565b1a60f81b8282815181106122dd576122dd612940565b60200101906001600160f81b03191690815f1a90535060049490941c9361230381612be7565b9050612296565b5083156106fc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161076f565b5f60208284031215612369575f80fd5b81356001600160e01b0319811681146106fc575f80fd5b5f8060408385031215612391575f80fd5b50508035926020909101359150565b5f602082840312156123b0575f80fd5b5035919050565b6001600160a01b0381168114611bd7575f80fd5b5f80604083850312156123dc575f80fd5b8235915060208301356123ee816123b7565b809150509250929050565b5f8083601f840112612409575f80fd5b50813567ffffffffffffffff811115612420575f80fd5b602083019150836020828501011115612437575f80fd5b9250929050565b5f806020838503121561244f575f80fd5b823567ffffffffffffffff811115612465575f80fd5b612471858286016123f9565b90969095509350505050565b5f805f805f805f6080888a031215612493575f80fd5b873567ffffffffffffffff808211156124aa575f80fd5b6124b68b838c016123f9565b909950975060208a01359150808211156124ce575f80fd5b6124da8b838c016123f9565b909750955060408a01359150808211156124f2575f80fd5b506124ff8a828b016123f9565b989b979a50959894979596606090950135949350505050565b5f805f6060848603121561252a575f80fd5b8335612535816123b7565b95602085013595506040909401359392505050565b5f6020828403121561255a575f80fd5b81356106fc816123b7565b5f8083601f840112612575575f80fd5b50813567ffffffffffffffff81111561258c575f80fd5b6020830191508360208260051b8501011115612437575f80fd5b5f805f805f80608087890312156125bb575f80fd5b863567ffffffffffffffff808211156125d2575f80fd5b6125de8a838b01612565565b909850965060208901359150808211156125f6575f80fd5b5061260389828a01612565565b979a9699509760408101359660609091013595509350505050565b5f6020828403121561262e575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156104be576104be612635565b8051612667816123b7565b919050565b5f6020828403121561267c575f80fd5b81516106fc816123b7565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b602081525f6126c2602083018486612687565b949350505050565b5f602082840312156126da575f80fd5b815180151581146106fc575f80fd5b828482376fffffffffffffffffffffffffffffffff19919091169101908152601001919050565b5f5b8381101561272a578181015183820152602001612712565b50505f910152565b5f8251612743818460208701612710565b9190910192915050565b5f808585111561275b575f80fd5b83861115612767575f80fd5b5050820193919092039150565b818382375f9101908152919050565b82848237909101908152602001919050565b838152818360208301375f910160200190815292915050565b5f84516127bf818460208901612710565b67ffffffffffffffff199490941691909301908152601881019190915260380192915050565b5f602082840312156127f5575f80fd5b815167ffffffffffffffff811681146106fc575f80fd5b818103818111156104be576104be612635565b5f8261283957634e487b7160e01b5f52601260045260245ffd5b500490565b80820281158282048414176104be576104be612635565b5f60208284031215612865575f80fd5b815160ff811681146106fc575f80fd5b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112612898575f80fd5b815167ffffffffffffffff808211156128b3576128b3612875565b604051601f8301601f19908116603f011681019082821181831017156128db576128db612875565b816040528381528660208588010111156128f3575f80fd5b612904846020830160208901612710565b9695505050505050565b5f6020828403121561291e575f80fd5b815167ffffffffffffffff811115612934575f80fd5b6126c284828501612889565b634e487b7160e01b5f52603260045260245ffd5b5f808335601e19843603018112612969575f80fd5b83018035915067ffffffffffffffff821115612983575f80fd5b602001915036819003821315612437575f80fd5b5f81518084526129ae816020860160208601612710565b601f01601f19169290920160200192915050565b608081525f6129d560808301888a612687565b82810360208401526129e8818789612687565b905082810360408401526129fc8186612997565b915050826060830152979650505050505050565b608081525f612a2360808301888a612687565b8281036020840152612a358188612997565b905082810360408401526129fc818688612687565b805160068110612667575f80fd5b5f805f805f805f80610100898b031215612a70575f80fd5b612a7989612a4a565b9750602089015167ffffffffffffffff80821115612a95575f80fd5b612aa18c838d01612889565b985060408b0151915080821115612ab6575f80fd5b612ac28c838d01612889565b975060608b0151915080821115612ad7575f80fd5b50612ae48b828c01612889565b955050612af360808a0161265c565b935060a0890151925060c0890151915060e089015190509295985092959890939650565b608081525f612b296080830187612997565b8281036020840152612b3b8187612997565b90508281036040840152612b4f8186612997565b91505082606083015295945050505050565b602081525f6106fc6020830184612997565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f8351612baa816017850160208801612710565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612bdb816028840160208801612710565b01602801949350505050565b5f81612bf557612bf5612635565b505f19019056fea2646970667358221220e90c1fcc9ac3b284311f94d29d16ebeab160375e26ca6944d57f96761b70fa5364736f6c63430008140033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
}

// PermissionlessPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use PermissionlessPoolMetaData.ABI instead.
var PermissionlessPoolABI = PermissionlessPoolMetaData.ABI

// PermissionlessPoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PermissionlessPoolMetaData.Bin instead.
var PermissionlessPoolBin = PermissionlessPoolMetaData.Bin

// DeployPermissionlessPool deploys a new Ethereum contract, binding an instance of PermissionlessPool to it.
func DeployPermissionlessPool(auth *bind.TransactOpts, backend bind.ContractBackend, _admin common.Address, _staderConfig common.Address) (common.Address, *types.Transaction, *PermissionlessPool, error) {
	parsed, err := PermissionlessPoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PermissionlessPoolBin), backend, _admin, _staderConfig)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PermissionlessPool{PermissionlessPoolCaller: PermissionlessPoolCaller{contract: contract}, PermissionlessPoolTransactor: PermissionlessPoolTransactor{contract: contract}, PermissionlessPoolFilterer: PermissionlessPoolFilterer{contract: contract}}, nil
}

// PermissionlessPool is an auto generated Go binding around an Ethereum contract.
type PermissionlessPool struct {
	PermissionlessPoolCaller     // Read-only binding to the contract
	PermissionlessPoolTransactor // Write-only binding to the contract
	PermissionlessPoolFilterer   // Log filterer for contract events
}

// PermissionlessPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type PermissionlessPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PermissionlessPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PermissionlessPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PermissionlessPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PermissionlessPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PermissionlessPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PermissionlessPoolSession struct {
	Contract     *PermissionlessPool // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// PermissionlessPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PermissionlessPoolCallerSession struct {
	Contract *PermissionlessPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// PermissionlessPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PermissionlessPoolTransactorSession struct {
	Contract     *PermissionlessPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// PermissionlessPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type PermissionlessPoolRaw struct {
	Contract *PermissionlessPool // Generic contract binding to access the raw methods on
}

// PermissionlessPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PermissionlessPoolCallerRaw struct {
	Contract *PermissionlessPoolCaller // Generic read-only contract binding to access the raw methods on
}

// PermissionlessPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PermissionlessPoolTransactorRaw struct {
	Contract *PermissionlessPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPermissionlessPool creates a new instance of PermissionlessPool, bound to a specific deployed contract.
func NewPermissionlessPool(address common.Address, backend bind.ContractBackend) (*PermissionlessPool, error) {
	contract, err := bindPermissionlessPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPool{PermissionlessPoolCaller: PermissionlessPoolCaller{contract: contract}, PermissionlessPoolTransactor: PermissionlessPoolTransactor{contract: contract}, PermissionlessPoolFilterer: PermissionlessPoolFilterer{contract: contract}}, nil
}

// NewPermissionlessPoolCaller creates a new read-only instance of PermissionlessPool, bound to a specific deployed contract.
func NewPermissionlessPoolCaller(address common.Address, caller bind.ContractCaller) (*PermissionlessPoolCaller, error) {
	contract, err := bindPermissionlessPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolCaller{contract: contract}, nil
}

// NewPermissionlessPoolTransactor creates a new write-only instance of PermissionlessPool, bound to a specific deployed contract.
func NewPermissionlessPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*PermissionlessPoolTransactor, error) {
	contract, err := bindPermissionlessPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolTransactor{contract: contract}, nil
}

// NewPermissionlessPoolFilterer creates a new log filterer instance of PermissionlessPool, bound to a specific deployed contract.
func NewPermissionlessPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*PermissionlessPoolFilterer, error) {
	contract, err := bindPermissionlessPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolFilterer{contract: contract}, nil
}

// bindPermissionlessPool binds a generic wrapper to an already deployed contract.
func bindPermissionlessPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PermissionlessPoolMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PermissionlessPool *PermissionlessPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PermissionlessPool.Contract.PermissionlessPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PermissionlessPool *PermissionlessPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.PermissionlessPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PermissionlessPool *PermissionlessPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.PermissionlessPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PermissionlessPool *PermissionlessPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PermissionlessPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PermissionlessPool *PermissionlessPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PermissionlessPool *PermissionlessPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _PermissionlessPool.Contract.DEFAULTADMINROLE(&_PermissionlessPool.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _PermissionlessPool.Contract.DEFAULTADMINROLE(&_PermissionlessPool.CallOpts)
}

// DEPOSITNODEBOND is a free data retrieval call binding the contract method 0x24f69706.
//
// Solidity: function DEPOSIT_NODE_BOND() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) DEPOSITNODEBOND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "DEPOSIT_NODE_BOND")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEPOSITNODEBOND is a free data retrieval call binding the contract method 0x24f69706.
//
// Solidity: function DEPOSIT_NODE_BOND() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) DEPOSITNODEBOND() (*big.Int, error) {
	return _PermissionlessPool.Contract.DEPOSITNODEBOND(&_PermissionlessPool.CallOpts)
}

// DEPOSITNODEBOND is a free data retrieval call binding the contract method 0x24f69706.
//
// Solidity: function DEPOSIT_NODE_BOND() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) DEPOSITNODEBOND() (*big.Int, error) {
	return _PermissionlessPool.Contract.DEPOSITNODEBOND(&_PermissionlessPool.CallOpts)
}

// MAXCOMMISSIONLIMITBIPS is a free data retrieval call binding the contract method 0x9cd6dd56.
//
// Solidity: function MAX_COMMISSION_LIMIT_BIPS() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) MAXCOMMISSIONLIMITBIPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "MAX_COMMISSION_LIMIT_BIPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCOMMISSIONLIMITBIPS is a free data retrieval call binding the contract method 0x9cd6dd56.
//
// Solidity: function MAX_COMMISSION_LIMIT_BIPS() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) MAXCOMMISSIONLIMITBIPS() (*big.Int, error) {
	return _PermissionlessPool.Contract.MAXCOMMISSIONLIMITBIPS(&_PermissionlessPool.CallOpts)
}

// MAXCOMMISSIONLIMITBIPS is a free data retrieval call binding the contract method 0x9cd6dd56.
//
// Solidity: function MAX_COMMISSION_LIMIT_BIPS() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) MAXCOMMISSIONLIMITBIPS() (*big.Int, error) {
	return _PermissionlessPool.Contract.MAXCOMMISSIONLIMITBIPS(&_PermissionlessPool.CallOpts)
}

// ComputeDepositDataRoot is a free data retrieval call binding the contract method 0x5c164e53.
//
// Solidity: function computeDepositDataRoot(bytes _pubkey, bytes _signature, bytes _withdrawCredential, uint256 _depositAmount) pure returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolCaller) ComputeDepositDataRoot(opts *bind.CallOpts, _pubkey []byte, _signature []byte, _withdrawCredential []byte, _depositAmount *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "computeDepositDataRoot", _pubkey, _signature, _withdrawCredential, _depositAmount)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeDepositDataRoot is a free data retrieval call binding the contract method 0x5c164e53.
//
// Solidity: function computeDepositDataRoot(bytes _pubkey, bytes _signature, bytes _withdrawCredential, uint256 _depositAmount) pure returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolSession) ComputeDepositDataRoot(_pubkey []byte, _signature []byte, _withdrawCredential []byte, _depositAmount *big.Int) ([32]byte, error) {
	return _PermissionlessPool.Contract.ComputeDepositDataRoot(&_PermissionlessPool.CallOpts, _pubkey, _signature, _withdrawCredential, _depositAmount)
}

// ComputeDepositDataRoot is a free data retrieval call binding the contract method 0x5c164e53.
//
// Solidity: function computeDepositDataRoot(bytes _pubkey, bytes _signature, bytes _withdrawCredential, uint256 _depositAmount) pure returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolCallerSession) ComputeDepositDataRoot(_pubkey []byte, _signature []byte, _withdrawCredential []byte, _depositAmount *big.Int) ([32]byte, error) {
	return _PermissionlessPool.Contract.ComputeDepositDataRoot(&_PermissionlessPool.CallOpts, _pubkey, _signature, _withdrawCredential, _depositAmount)
}

// GetCollateralETH is a free data retrieval call binding the contract method 0xb01db078.
//
// Solidity: function getCollateralETH() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) GetCollateralETH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "getCollateralETH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCollateralETH is a free data retrieval call binding the contract method 0xb01db078.
//
// Solidity: function getCollateralETH() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) GetCollateralETH() (*big.Int, error) {
	return _PermissionlessPool.Contract.GetCollateralETH(&_PermissionlessPool.CallOpts)
}

// GetCollateralETH is a free data retrieval call binding the contract method 0xb01db078.
//
// Solidity: function getCollateralETH() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) GetCollateralETH() (*big.Int, error) {
	return _PermissionlessPool.Contract.GetCollateralETH(&_PermissionlessPool.CallOpts)
}

// GetNodeRegistry is a free data retrieval call binding the contract method 0xb6fb3fac.
//
// Solidity: function getNodeRegistry() view returns(address)
func (_PermissionlessPool *PermissionlessPoolCaller) GetNodeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "getNodeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetNodeRegistry is a free data retrieval call binding the contract method 0xb6fb3fac.
//
// Solidity: function getNodeRegistry() view returns(address)
func (_PermissionlessPool *PermissionlessPoolSession) GetNodeRegistry() (common.Address, error) {
	return _PermissionlessPool.Contract.GetNodeRegistry(&_PermissionlessPool.CallOpts)
}

// GetNodeRegistry is a free data retrieval call binding the contract method 0xb6fb3fac.
//
// Solidity: function getNodeRegistry() view returns(address)
func (_PermissionlessPool *PermissionlessPoolCallerSession) GetNodeRegistry() (common.Address, error) {
	return _PermissionlessPool.Contract.GetNodeRegistry(&_PermissionlessPool.CallOpts)
}

// GetOperatorTotalNonTerminalKeys is a free data retrieval call binding the contract method 0x8a25bcec.
//
// Solidity: function getOperatorTotalNonTerminalKeys(address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) GetOperatorTotalNonTerminalKeys(opts *bind.CallOpts, _nodeOperator common.Address, _startIndex *big.Int, _endIndex *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "getOperatorTotalNonTerminalKeys", _nodeOperator, _startIndex, _endIndex)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOperatorTotalNonTerminalKeys is a free data retrieval call binding the contract method 0x8a25bcec.
//
// Solidity: function getOperatorTotalNonTerminalKeys(address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) GetOperatorTotalNonTerminalKeys(_nodeOperator common.Address, _startIndex *big.Int, _endIndex *big.Int) (*big.Int, error) {
	return _PermissionlessPool.Contract.GetOperatorTotalNonTerminalKeys(&_PermissionlessPool.CallOpts, _nodeOperator, _startIndex, _endIndex)
}

// GetOperatorTotalNonTerminalKeys is a free data retrieval call binding the contract method 0x8a25bcec.
//
// Solidity: function getOperatorTotalNonTerminalKeys(address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) GetOperatorTotalNonTerminalKeys(_nodeOperator common.Address, _startIndex *big.Int, _endIndex *big.Int) (*big.Int, error) {
	return _PermissionlessPool.Contract.GetOperatorTotalNonTerminalKeys(&_PermissionlessPool.CallOpts, _nodeOperator, _startIndex, _endIndex)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _PermissionlessPool.Contract.GetRoleAdmin(&_PermissionlessPool.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_PermissionlessPool *PermissionlessPoolCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _PermissionlessPool.Contract.GetRoleAdmin(&_PermissionlessPool.CallOpts, role)
}

// GetSocializingPoolAddress is a free data retrieval call binding the contract method 0xf74b4cd1.
//
// Solidity: function getSocializingPoolAddress() view returns(address)
func (_PermissionlessPool *PermissionlessPoolCaller) GetSocializingPoolAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "getSocializingPoolAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSocializingPoolAddress is a free data retrieval call binding the contract method 0xf74b4cd1.
//
// Solidity: function getSocializingPoolAddress() view returns(address)
func (_PermissionlessPool *PermissionlessPoolSession) GetSocializingPoolAddress() (common.Address, error) {
	return _PermissionlessPool.Contract.GetSocializingPoolAddress(&_PermissionlessPool.CallOpts)
}

// GetSocializingPoolAddress is a free data retrieval call binding the contract method 0xf74b4cd1.
//
// Solidity: function getSocializingPoolAddress() view returns(address)
func (_PermissionlessPool *PermissionlessPoolCallerSession) GetSocializingPoolAddress() (common.Address, error) {
	return _PermissionlessPool.Contract.GetSocializingPoolAddress(&_PermissionlessPool.CallOpts)
}

// GetTotalActiveValidatorCount is a free data retrieval call binding the contract method 0x77c359e1.
//
// Solidity: function getTotalActiveValidatorCount() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) GetTotalActiveValidatorCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "getTotalActiveValidatorCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalActiveValidatorCount is a free data retrieval call binding the contract method 0x77c359e1.
//
// Solidity: function getTotalActiveValidatorCount() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) GetTotalActiveValidatorCount() (*big.Int, error) {
	return _PermissionlessPool.Contract.GetTotalActiveValidatorCount(&_PermissionlessPool.CallOpts)
}

// GetTotalActiveValidatorCount is a free data retrieval call binding the contract method 0x77c359e1.
//
// Solidity: function getTotalActiveValidatorCount() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) GetTotalActiveValidatorCount() (*big.Int, error) {
	return _PermissionlessPool.Contract.GetTotalActiveValidatorCount(&_PermissionlessPool.CallOpts)
}

// GetTotalQueuedValidatorCount is a free data retrieval call binding the contract method 0x7bd977d9.
//
// Solidity: function getTotalQueuedValidatorCount() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) GetTotalQueuedValidatorCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "getTotalQueuedValidatorCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalQueuedValidatorCount is a free data retrieval call binding the contract method 0x7bd977d9.
//
// Solidity: function getTotalQueuedValidatorCount() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) GetTotalQueuedValidatorCount() (*big.Int, error) {
	return _PermissionlessPool.Contract.GetTotalQueuedValidatorCount(&_PermissionlessPool.CallOpts)
}

// GetTotalQueuedValidatorCount is a free data retrieval call binding the contract method 0x7bd977d9.
//
// Solidity: function getTotalQueuedValidatorCount() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) GetTotalQueuedValidatorCount() (*big.Int, error) {
	return _PermissionlessPool.Contract.GetTotalQueuedValidatorCount(&_PermissionlessPool.CallOpts)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _PermissionlessPool.Contract.HasRole(&_PermissionlessPool.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _PermissionlessPool.Contract.HasRole(&_PermissionlessPool.CallOpts, role, account)
}

// IsExistingOperator is a free data retrieval call binding the contract method 0xf9c4dda4.
//
// Solidity: function isExistingOperator(address _operAddr) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCaller) IsExistingOperator(opts *bind.CallOpts, _operAddr common.Address) (bool, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "isExistingOperator", _operAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsExistingOperator is a free data retrieval call binding the contract method 0xf9c4dda4.
//
// Solidity: function isExistingOperator(address _operAddr) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolSession) IsExistingOperator(_operAddr common.Address) (bool, error) {
	return _PermissionlessPool.Contract.IsExistingOperator(&_PermissionlessPool.CallOpts, _operAddr)
}

// IsExistingOperator is a free data retrieval call binding the contract method 0xf9c4dda4.
//
// Solidity: function isExistingOperator(address _operAddr) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCallerSession) IsExistingOperator(_operAddr common.Address) (bool, error) {
	return _PermissionlessPool.Contract.IsExistingOperator(&_PermissionlessPool.CallOpts, _operAddr)
}

// IsExistingPubkey is a free data retrieval call binding the contract method 0x36514d9f.
//
// Solidity: function isExistingPubkey(bytes _pubkey) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCaller) IsExistingPubkey(opts *bind.CallOpts, _pubkey []byte) (bool, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "isExistingPubkey", _pubkey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsExistingPubkey is a free data retrieval call binding the contract method 0x36514d9f.
//
// Solidity: function isExistingPubkey(bytes _pubkey) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolSession) IsExistingPubkey(_pubkey []byte) (bool, error) {
	return _PermissionlessPool.Contract.IsExistingPubkey(&_PermissionlessPool.CallOpts, _pubkey)
}

// IsExistingPubkey is a free data retrieval call binding the contract method 0x36514d9f.
//
// Solidity: function isExistingPubkey(bytes _pubkey) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCallerSession) IsExistingPubkey(_pubkey []byte) (bool, error) {
	return _PermissionlessPool.Contract.IsExistingPubkey(&_PermissionlessPool.CallOpts, _pubkey)
}

// OperatorFee is a free data retrieval call binding the contract method 0x89afc0f1.
//
// Solidity: function operatorFee() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) OperatorFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "operatorFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OperatorFee is a free data retrieval call binding the contract method 0x89afc0f1.
//
// Solidity: function operatorFee() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) OperatorFee() (*big.Int, error) {
	return _PermissionlessPool.Contract.OperatorFee(&_PermissionlessPool.CallOpts)
}

// OperatorFee is a free data retrieval call binding the contract method 0x89afc0f1.
//
// Solidity: function operatorFee() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) OperatorFee() (*big.Int, error) {
	return _PermissionlessPool.Contract.OperatorFee(&_PermissionlessPool.CallOpts)
}

// ProtocolFee is a free data retrieval call binding the contract method 0xb0e21e8a.
//
// Solidity: function protocolFee() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCaller) ProtocolFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "protocolFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProtocolFee is a free data retrieval call binding the contract method 0xb0e21e8a.
//
// Solidity: function protocolFee() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolSession) ProtocolFee() (*big.Int, error) {
	return _PermissionlessPool.Contract.ProtocolFee(&_PermissionlessPool.CallOpts)
}

// ProtocolFee is a free data retrieval call binding the contract method 0xb0e21e8a.
//
// Solidity: function protocolFee() view returns(uint256)
func (_PermissionlessPool *PermissionlessPoolCallerSession) ProtocolFee() (*big.Int, error) {
	return _PermissionlessPool.Contract.ProtocolFee(&_PermissionlessPool.CallOpts)
}

// StaderConfig is a free data retrieval call binding the contract method 0x490ffa35.
//
// Solidity: function staderConfig() view returns(address)
func (_PermissionlessPool *PermissionlessPoolCaller) StaderConfig(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "staderConfig")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StaderConfig is a free data retrieval call binding the contract method 0x490ffa35.
//
// Solidity: function staderConfig() view returns(address)
func (_PermissionlessPool *PermissionlessPoolSession) StaderConfig() (common.Address, error) {
	return _PermissionlessPool.Contract.StaderConfig(&_PermissionlessPool.CallOpts)
}

// StaderConfig is a free data retrieval call binding the contract method 0x490ffa35.
//
// Solidity: function staderConfig() view returns(address)
func (_PermissionlessPool *PermissionlessPoolCallerSession) StaderConfig() (common.Address, error) {
	return _PermissionlessPool.Contract.StaderConfig(&_PermissionlessPool.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _PermissionlessPool.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PermissionlessPool.Contract.SupportsInterface(&_PermissionlessPool.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PermissionlessPool *PermissionlessPoolCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PermissionlessPool.Contract.SupportsInterface(&_PermissionlessPool.CallOpts, interfaceId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.GrantRole(&_PermissionlessPool.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.GrantRole(&_PermissionlessPool.TransactOpts, role, account)
}

// PreDepositOnBeaconChain is a paid mutator transaction binding the contract method 0xeda0ae12.
//
// Solidity: function preDepositOnBeaconChain(bytes[] _pubkey, bytes[] _preDepositSignature, uint256 _operatorId, uint256 _operatorTotalKeys) payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) PreDepositOnBeaconChain(opts *bind.TransactOpts, _pubkey [][]byte, _preDepositSignature [][]byte, _operatorId *big.Int, _operatorTotalKeys *big.Int) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "preDepositOnBeaconChain", _pubkey, _preDepositSignature, _operatorId, _operatorTotalKeys)
}

// PreDepositOnBeaconChain is a paid mutator transaction binding the contract method 0xeda0ae12.
//
// Solidity: function preDepositOnBeaconChain(bytes[] _pubkey, bytes[] _preDepositSignature, uint256 _operatorId, uint256 _operatorTotalKeys) payable returns()
func (_PermissionlessPool *PermissionlessPoolSession) PreDepositOnBeaconChain(_pubkey [][]byte, _preDepositSignature [][]byte, _operatorId *big.Int, _operatorTotalKeys *big.Int) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.PreDepositOnBeaconChain(&_PermissionlessPool.TransactOpts, _pubkey, _preDepositSignature, _operatorId, _operatorTotalKeys)
}

// PreDepositOnBeaconChain is a paid mutator transaction binding the contract method 0xeda0ae12.
//
// Solidity: function preDepositOnBeaconChain(bytes[] _pubkey, bytes[] _preDepositSignature, uint256 _operatorId, uint256 _operatorTotalKeys) payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) PreDepositOnBeaconChain(_pubkey [][]byte, _preDepositSignature [][]byte, _operatorId *big.Int, _operatorTotalKeys *big.Int) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.PreDepositOnBeaconChain(&_PermissionlessPool.TransactOpts, _pubkey, _preDepositSignature, _operatorId, _operatorTotalKeys)
}

// ReceiveRemainingCollateralETH is a paid mutator transaction binding the contract method 0x1f033ef0.
//
// Solidity: function receiveRemainingCollateralETH() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) ReceiveRemainingCollateralETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "receiveRemainingCollateralETH")
}

// ReceiveRemainingCollateralETH is a paid mutator transaction binding the contract method 0x1f033ef0.
//
// Solidity: function receiveRemainingCollateralETH() payable returns()
func (_PermissionlessPool *PermissionlessPoolSession) ReceiveRemainingCollateralETH() (*types.Transaction, error) {
	return _PermissionlessPool.Contract.ReceiveRemainingCollateralETH(&_PermissionlessPool.TransactOpts)
}

// ReceiveRemainingCollateralETH is a paid mutator transaction binding the contract method 0x1f033ef0.
//
// Solidity: function receiveRemainingCollateralETH() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) ReceiveRemainingCollateralETH() (*types.Transaction, error) {
	return _PermissionlessPool.Contract.ReceiveRemainingCollateralETH(&_PermissionlessPool.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.RenounceRole(&_PermissionlessPool.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.RenounceRole(&_PermissionlessPool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.RevokeRole(&_PermissionlessPool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.RevokeRole(&_PermissionlessPool.TransactOpts, role, account)
}

// SetCommissionFees is a paid mutator transaction binding the contract method 0x21066d18.
//
// Solidity: function setCommissionFees(uint256 _protocolFee, uint256 _operatorFee) returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) SetCommissionFees(opts *bind.TransactOpts, _protocolFee *big.Int, _operatorFee *big.Int) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "setCommissionFees", _protocolFee, _operatorFee)
}

// SetCommissionFees is a paid mutator transaction binding the contract method 0x21066d18.
//
// Solidity: function setCommissionFees(uint256 _protocolFee, uint256 _operatorFee) returns()
func (_PermissionlessPool *PermissionlessPoolSession) SetCommissionFees(_protocolFee *big.Int, _operatorFee *big.Int) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.SetCommissionFees(&_PermissionlessPool.TransactOpts, _protocolFee, _operatorFee)
}

// SetCommissionFees is a paid mutator transaction binding the contract method 0x21066d18.
//
// Solidity: function setCommissionFees(uint256 _protocolFee, uint256 _operatorFee) returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) SetCommissionFees(_protocolFee *big.Int, _operatorFee *big.Int) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.SetCommissionFees(&_PermissionlessPool.TransactOpts, _protocolFee, _operatorFee)
}

// StakeUserETHToBeaconChain is a paid mutator transaction binding the contract method 0x9b26728e.
//
// Solidity: function stakeUserETHToBeaconChain() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) StakeUserETHToBeaconChain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "stakeUserETHToBeaconChain")
}

// StakeUserETHToBeaconChain is a paid mutator transaction binding the contract method 0x9b26728e.
//
// Solidity: function stakeUserETHToBeaconChain() payable returns()
func (_PermissionlessPool *PermissionlessPoolSession) StakeUserETHToBeaconChain() (*types.Transaction, error) {
	return _PermissionlessPool.Contract.StakeUserETHToBeaconChain(&_PermissionlessPool.TransactOpts)
}

// StakeUserETHToBeaconChain is a paid mutator transaction binding the contract method 0x9b26728e.
//
// Solidity: function stakeUserETHToBeaconChain() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) StakeUserETHToBeaconChain() (*types.Transaction, error) {
	return _PermissionlessPool.Contract.StakeUserETHToBeaconChain(&_PermissionlessPool.TransactOpts)
}

// UpdateStaderConfig is a paid mutator transaction binding the contract method 0x9ee804cb.
//
// Solidity: function updateStaderConfig(address _staderConfig) returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) UpdateStaderConfig(opts *bind.TransactOpts, _staderConfig common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.contract.Transact(opts, "updateStaderConfig", _staderConfig)
}

// UpdateStaderConfig is a paid mutator transaction binding the contract method 0x9ee804cb.
//
// Solidity: function updateStaderConfig(address _staderConfig) returns()
func (_PermissionlessPool *PermissionlessPoolSession) UpdateStaderConfig(_staderConfig common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.UpdateStaderConfig(&_PermissionlessPool.TransactOpts, _staderConfig)
}

// UpdateStaderConfig is a paid mutator transaction binding the contract method 0x9ee804cb.
//
// Solidity: function updateStaderConfig(address _staderConfig) returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) UpdateStaderConfig(_staderConfig common.Address) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.UpdateStaderConfig(&_PermissionlessPool.TransactOpts, _staderConfig)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _PermissionlessPool.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_PermissionlessPool *PermissionlessPoolSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.Fallback(&_PermissionlessPool.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _PermissionlessPool.Contract.Fallback(&_PermissionlessPool.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PermissionlessPool.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PermissionlessPool *PermissionlessPoolSession) Receive() (*types.Transaction, error) {
	return _PermissionlessPool.Contract.Receive(&_PermissionlessPool.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PermissionlessPool *PermissionlessPoolTransactorSession) Receive() (*types.Transaction, error) {
	return _PermissionlessPool.Contract.Receive(&_PermissionlessPool.TransactOpts)
}

// PermissionlessPoolInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PermissionlessPool contract.
type PermissionlessPoolInitializedIterator struct {
	Event *PermissionlessPoolInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolInitialized represents a Initialized event raised by the PermissionlessPool contract.
type PermissionlessPoolInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterInitialized(opts *bind.FilterOpts) (*PermissionlessPoolInitializedIterator, error) {

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolInitializedIterator{contract: _PermissionlessPool.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolInitialized) (event.Subscription, error) {

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolInitialized)
				if err := _PermissionlessPool.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseInitialized(log types.Log) (*PermissionlessPoolInitialized, error) {
	event := new(PermissionlessPoolInitialized)
	if err := _PermissionlessPool.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolReceivedCollateralETHIterator is returned from FilterReceivedCollateralETH and is used to iterate over the raw logs and unpacked data for ReceivedCollateralETH events raised by the PermissionlessPool contract.
type PermissionlessPoolReceivedCollateralETHIterator struct {
	Event *PermissionlessPoolReceivedCollateralETH // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolReceivedCollateralETHIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolReceivedCollateralETH)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolReceivedCollateralETH)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolReceivedCollateralETHIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolReceivedCollateralETHIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolReceivedCollateralETH represents a ReceivedCollateralETH event raised by the PermissionlessPool contract.
type PermissionlessPoolReceivedCollateralETH struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterReceivedCollateralETH is a free log retrieval operation binding the contract event 0x3726a70cbf9252aacb06774b2f9f7108d837fc60afd7143f86eec77d7e3da94b.
//
// Solidity: event ReceivedCollateralETH(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterReceivedCollateralETH(opts *bind.FilterOpts) (*PermissionlessPoolReceivedCollateralETHIterator, error) {

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "ReceivedCollateralETH")
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolReceivedCollateralETHIterator{contract: _PermissionlessPool.contract, event: "ReceivedCollateralETH", logs: logs, sub: sub}, nil
}

// WatchReceivedCollateralETH is a free log subscription operation binding the contract event 0x3726a70cbf9252aacb06774b2f9f7108d837fc60afd7143f86eec77d7e3da94b.
//
// Solidity: event ReceivedCollateralETH(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchReceivedCollateralETH(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolReceivedCollateralETH) (event.Subscription, error) {

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "ReceivedCollateralETH")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolReceivedCollateralETH)
				if err := _PermissionlessPool.contract.UnpackLog(event, "ReceivedCollateralETH", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceivedCollateralETH is a log parse operation binding the contract event 0x3726a70cbf9252aacb06774b2f9f7108d837fc60afd7143f86eec77d7e3da94b.
//
// Solidity: event ReceivedCollateralETH(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseReceivedCollateralETH(log types.Log) (*PermissionlessPoolReceivedCollateralETH, error) {
	event := new(PermissionlessPoolReceivedCollateralETH)
	if err := _PermissionlessPool.contract.UnpackLog(event, "ReceivedCollateralETH", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolReceivedInsuranceFundIterator is returned from FilterReceivedInsuranceFund and is used to iterate over the raw logs and unpacked data for ReceivedInsuranceFund events raised by the PermissionlessPool contract.
type PermissionlessPoolReceivedInsuranceFundIterator struct {
	Event *PermissionlessPoolReceivedInsuranceFund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolReceivedInsuranceFundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolReceivedInsuranceFund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolReceivedInsuranceFund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolReceivedInsuranceFundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolReceivedInsuranceFundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolReceivedInsuranceFund represents a ReceivedInsuranceFund event raised by the PermissionlessPool contract.
type PermissionlessPoolReceivedInsuranceFund struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterReceivedInsuranceFund is a free log retrieval operation binding the contract event 0xf43316e35306192a57665c134c0731f8e965fd6b625c620983cc68c2dd183726.
//
// Solidity: event ReceivedInsuranceFund(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterReceivedInsuranceFund(opts *bind.FilterOpts) (*PermissionlessPoolReceivedInsuranceFundIterator, error) {

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "ReceivedInsuranceFund")
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolReceivedInsuranceFundIterator{contract: _PermissionlessPool.contract, event: "ReceivedInsuranceFund", logs: logs, sub: sub}, nil
}

// WatchReceivedInsuranceFund is a free log subscription operation binding the contract event 0xf43316e35306192a57665c134c0731f8e965fd6b625c620983cc68c2dd183726.
//
// Solidity: event ReceivedInsuranceFund(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchReceivedInsuranceFund(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolReceivedInsuranceFund) (event.Subscription, error) {

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "ReceivedInsuranceFund")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolReceivedInsuranceFund)
				if err := _PermissionlessPool.contract.UnpackLog(event, "ReceivedInsuranceFund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceivedInsuranceFund is a log parse operation binding the contract event 0xf43316e35306192a57665c134c0731f8e965fd6b625c620983cc68c2dd183726.
//
// Solidity: event ReceivedInsuranceFund(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseReceivedInsuranceFund(log types.Log) (*PermissionlessPoolReceivedInsuranceFund, error) {
	event := new(PermissionlessPoolReceivedInsuranceFund)
	if err := _PermissionlessPool.contract.UnpackLog(event, "ReceivedInsuranceFund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the PermissionlessPool contract.
type PermissionlessPoolRoleAdminChangedIterator struct {
	Event *PermissionlessPoolRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolRoleAdminChanged represents a RoleAdminChanged event raised by the PermissionlessPool contract.
type PermissionlessPoolRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*PermissionlessPoolRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolRoleAdminChangedIterator{contract: _PermissionlessPool.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolRoleAdminChanged)
				if err := _PermissionlessPool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseRoleAdminChanged(log types.Log) (*PermissionlessPoolRoleAdminChanged, error) {
	event := new(PermissionlessPoolRoleAdminChanged)
	if err := _PermissionlessPool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the PermissionlessPool contract.
type PermissionlessPoolRoleGrantedIterator struct {
	Event *PermissionlessPoolRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolRoleGranted represents a RoleGranted event raised by the PermissionlessPool contract.
type PermissionlessPoolRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*PermissionlessPoolRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolRoleGrantedIterator{contract: _PermissionlessPool.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolRoleGranted)
				if err := _PermissionlessPool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseRoleGranted(log types.Log) (*PermissionlessPoolRoleGranted, error) {
	event := new(PermissionlessPoolRoleGranted)
	if err := _PermissionlessPool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the PermissionlessPool contract.
type PermissionlessPoolRoleRevokedIterator struct {
	Event *PermissionlessPoolRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolRoleRevoked represents a RoleRevoked event raised by the PermissionlessPool contract.
type PermissionlessPoolRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*PermissionlessPoolRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolRoleRevokedIterator{contract: _PermissionlessPool.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolRoleRevoked)
				if err := _PermissionlessPool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseRoleRevoked(log types.Log) (*PermissionlessPoolRoleRevoked, error) {
	event := new(PermissionlessPoolRoleRevoked)
	if err := _PermissionlessPool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolTransferredETHToSSPMForDefectiveKeysIterator is returned from FilterTransferredETHToSSPMForDefectiveKeys and is used to iterate over the raw logs and unpacked data for TransferredETHToSSPMForDefectiveKeys events raised by the PermissionlessPool contract.
type PermissionlessPoolTransferredETHToSSPMForDefectiveKeysIterator struct {
	Event *PermissionlessPoolTransferredETHToSSPMForDefectiveKeys // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolTransferredETHToSSPMForDefectiveKeysIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolTransferredETHToSSPMForDefectiveKeys)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolTransferredETHToSSPMForDefectiveKeys)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolTransferredETHToSSPMForDefectiveKeysIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolTransferredETHToSSPMForDefectiveKeysIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolTransferredETHToSSPMForDefectiveKeys represents a TransferredETHToSSPMForDefectiveKeys event raised by the PermissionlessPool contract.
type PermissionlessPoolTransferredETHToSSPMForDefectiveKeys struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransferredETHToSSPMForDefectiveKeys is a free log retrieval operation binding the contract event 0x1149ac7366ffa1a2dee383a534b6742d013df82e7c15fd5720fd1ce82592a36f.
//
// Solidity: event TransferredETHToSSPMForDefectiveKeys(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterTransferredETHToSSPMForDefectiveKeys(opts *bind.FilterOpts) (*PermissionlessPoolTransferredETHToSSPMForDefectiveKeysIterator, error) {

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "TransferredETHToSSPMForDefectiveKeys")
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolTransferredETHToSSPMForDefectiveKeysIterator{contract: _PermissionlessPool.contract, event: "TransferredETHToSSPMForDefectiveKeys", logs: logs, sub: sub}, nil
}

// WatchTransferredETHToSSPMForDefectiveKeys is a free log subscription operation binding the contract event 0x1149ac7366ffa1a2dee383a534b6742d013df82e7c15fd5720fd1ce82592a36f.
//
// Solidity: event TransferredETHToSSPMForDefectiveKeys(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchTransferredETHToSSPMForDefectiveKeys(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolTransferredETHToSSPMForDefectiveKeys) (event.Subscription, error) {

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "TransferredETHToSSPMForDefectiveKeys")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolTransferredETHToSSPMForDefectiveKeys)
				if err := _PermissionlessPool.contract.UnpackLog(event, "TransferredETHToSSPMForDefectiveKeys", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferredETHToSSPMForDefectiveKeys is a log parse operation binding the contract event 0x1149ac7366ffa1a2dee383a534b6742d013df82e7c15fd5720fd1ce82592a36f.
//
// Solidity: event TransferredETHToSSPMForDefectiveKeys(uint256 amount)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseTransferredETHToSSPMForDefectiveKeys(log types.Log) (*PermissionlessPoolTransferredETHToSSPMForDefectiveKeys, error) {
	event := new(PermissionlessPoolTransferredETHToSSPMForDefectiveKeys)
	if err := _PermissionlessPool.contract.UnpackLog(event, "TransferredETHToSSPMForDefectiveKeys", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolUpdatedCommissionFeesIterator is returned from FilterUpdatedCommissionFees and is used to iterate over the raw logs and unpacked data for UpdatedCommissionFees events raised by the PermissionlessPool contract.
type PermissionlessPoolUpdatedCommissionFeesIterator struct {
	Event *PermissionlessPoolUpdatedCommissionFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolUpdatedCommissionFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolUpdatedCommissionFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolUpdatedCommissionFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolUpdatedCommissionFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolUpdatedCommissionFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolUpdatedCommissionFees represents a UpdatedCommissionFees event raised by the PermissionlessPool contract.
type PermissionlessPoolUpdatedCommissionFees struct {
	ProtocolFee *big.Int
	OperatorFee *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdatedCommissionFees is a free log retrieval operation binding the contract event 0xe8525a7862504bbe091b0440fe96979769664cae1625591ff0a9816512a5287b.
//
// Solidity: event UpdatedCommissionFees(uint256 protocolFee, uint256 operatorFee)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterUpdatedCommissionFees(opts *bind.FilterOpts) (*PermissionlessPoolUpdatedCommissionFeesIterator, error) {

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "UpdatedCommissionFees")
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolUpdatedCommissionFeesIterator{contract: _PermissionlessPool.contract, event: "UpdatedCommissionFees", logs: logs, sub: sub}, nil
}

// WatchUpdatedCommissionFees is a free log subscription operation binding the contract event 0xe8525a7862504bbe091b0440fe96979769664cae1625591ff0a9816512a5287b.
//
// Solidity: event UpdatedCommissionFees(uint256 protocolFee, uint256 operatorFee)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchUpdatedCommissionFees(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolUpdatedCommissionFees) (event.Subscription, error) {

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "UpdatedCommissionFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolUpdatedCommissionFees)
				if err := _PermissionlessPool.contract.UnpackLog(event, "UpdatedCommissionFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdatedCommissionFees is a log parse operation binding the contract event 0xe8525a7862504bbe091b0440fe96979769664cae1625591ff0a9816512a5287b.
//
// Solidity: event UpdatedCommissionFees(uint256 protocolFee, uint256 operatorFee)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseUpdatedCommissionFees(log types.Log) (*PermissionlessPoolUpdatedCommissionFees, error) {
	event := new(PermissionlessPoolUpdatedCommissionFees)
	if err := _PermissionlessPool.contract.UnpackLog(event, "UpdatedCommissionFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolUpdatedStaderConfigIterator is returned from FilterUpdatedStaderConfig and is used to iterate over the raw logs and unpacked data for UpdatedStaderConfig events raised by the PermissionlessPool contract.
type PermissionlessPoolUpdatedStaderConfigIterator struct {
	Event *PermissionlessPoolUpdatedStaderConfig // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolUpdatedStaderConfigIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolUpdatedStaderConfig)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolUpdatedStaderConfig)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolUpdatedStaderConfigIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolUpdatedStaderConfigIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolUpdatedStaderConfig represents a UpdatedStaderConfig event raised by the PermissionlessPool contract.
type PermissionlessPoolUpdatedStaderConfig struct {
	StaderConfig common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdatedStaderConfig is a free log retrieval operation binding the contract event 0xdb2219043d7b197cb235f1af0cf6d782d77dee3de19e3f4fb6d39aae633b4485.
//
// Solidity: event UpdatedStaderConfig(address staderConfig)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterUpdatedStaderConfig(opts *bind.FilterOpts) (*PermissionlessPoolUpdatedStaderConfigIterator, error) {

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "UpdatedStaderConfig")
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolUpdatedStaderConfigIterator{contract: _PermissionlessPool.contract, event: "UpdatedStaderConfig", logs: logs, sub: sub}, nil
}

// WatchUpdatedStaderConfig is a free log subscription operation binding the contract event 0xdb2219043d7b197cb235f1af0cf6d782d77dee3de19e3f4fb6d39aae633b4485.
//
// Solidity: event UpdatedStaderConfig(address staderConfig)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchUpdatedStaderConfig(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolUpdatedStaderConfig) (event.Subscription, error) {

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "UpdatedStaderConfig")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolUpdatedStaderConfig)
				if err := _PermissionlessPool.contract.UnpackLog(event, "UpdatedStaderConfig", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdatedStaderConfig is a log parse operation binding the contract event 0xdb2219043d7b197cb235f1af0cf6d782d77dee3de19e3f4fb6d39aae633b4485.
//
// Solidity: event UpdatedStaderConfig(address staderConfig)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseUpdatedStaderConfig(log types.Log) (*PermissionlessPoolUpdatedStaderConfig, error) {
	event := new(PermissionlessPoolUpdatedStaderConfig)
	if err := _PermissionlessPool.contract.UnpackLog(event, "UpdatedStaderConfig", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolValidatorDepositedOnBeaconChainIterator is returned from FilterValidatorDepositedOnBeaconChain and is used to iterate over the raw logs and unpacked data for ValidatorDepositedOnBeaconChain events raised by the PermissionlessPool contract.
type PermissionlessPoolValidatorDepositedOnBeaconChainIterator struct {
	Event *PermissionlessPoolValidatorDepositedOnBeaconChain // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolValidatorDepositedOnBeaconChainIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolValidatorDepositedOnBeaconChain)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolValidatorDepositedOnBeaconChain)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolValidatorDepositedOnBeaconChainIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolValidatorDepositedOnBeaconChainIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolValidatorDepositedOnBeaconChain represents a ValidatorDepositedOnBeaconChain event raised by the PermissionlessPool contract.
type PermissionlessPoolValidatorDepositedOnBeaconChain struct {
	ValidatorId *big.Int
	PubKey      []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterValidatorDepositedOnBeaconChain is a free log retrieval operation binding the contract event 0xbef89de94658b7ef396ba7f9316542858c893c9011602906b1a2ad18d0a99c35.
//
// Solidity: event ValidatorDepositedOnBeaconChain(uint256 indexed validatorId, bytes pubKey)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterValidatorDepositedOnBeaconChain(opts *bind.FilterOpts, validatorId []*big.Int) (*PermissionlessPoolValidatorDepositedOnBeaconChainIterator, error) {

	var validatorIdRule []interface{}
	for _, validatorIdItem := range validatorId {
		validatorIdRule = append(validatorIdRule, validatorIdItem)
	}

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "ValidatorDepositedOnBeaconChain", validatorIdRule)
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolValidatorDepositedOnBeaconChainIterator{contract: _PermissionlessPool.contract, event: "ValidatorDepositedOnBeaconChain", logs: logs, sub: sub}, nil
}

// WatchValidatorDepositedOnBeaconChain is a free log subscription operation binding the contract event 0xbef89de94658b7ef396ba7f9316542858c893c9011602906b1a2ad18d0a99c35.
//
// Solidity: event ValidatorDepositedOnBeaconChain(uint256 indexed validatorId, bytes pubKey)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchValidatorDepositedOnBeaconChain(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolValidatorDepositedOnBeaconChain, validatorId []*big.Int) (event.Subscription, error) {

	var validatorIdRule []interface{}
	for _, validatorIdItem := range validatorId {
		validatorIdRule = append(validatorIdRule, validatorIdItem)
	}

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "ValidatorDepositedOnBeaconChain", validatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolValidatorDepositedOnBeaconChain)
				if err := _PermissionlessPool.contract.UnpackLog(event, "ValidatorDepositedOnBeaconChain", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorDepositedOnBeaconChain is a log parse operation binding the contract event 0xbef89de94658b7ef396ba7f9316542858c893c9011602906b1a2ad18d0a99c35.
//
// Solidity: event ValidatorDepositedOnBeaconChain(uint256 indexed validatorId, bytes pubKey)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseValidatorDepositedOnBeaconChain(log types.Log) (*PermissionlessPoolValidatorDepositedOnBeaconChain, error) {
	event := new(PermissionlessPoolValidatorDepositedOnBeaconChain)
	if err := _PermissionlessPool.contract.UnpackLog(event, "ValidatorDepositedOnBeaconChain", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PermissionlessPoolValidatorPreDepositedOnBeaconChainIterator is returned from FilterValidatorPreDepositedOnBeaconChain and is used to iterate over the raw logs and unpacked data for ValidatorPreDepositedOnBeaconChain events raised by the PermissionlessPool contract.
type PermissionlessPoolValidatorPreDepositedOnBeaconChainIterator struct {
	Event *PermissionlessPoolValidatorPreDepositedOnBeaconChain // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PermissionlessPoolValidatorPreDepositedOnBeaconChainIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PermissionlessPoolValidatorPreDepositedOnBeaconChain)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PermissionlessPoolValidatorPreDepositedOnBeaconChain)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PermissionlessPoolValidatorPreDepositedOnBeaconChainIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PermissionlessPoolValidatorPreDepositedOnBeaconChainIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PermissionlessPoolValidatorPreDepositedOnBeaconChain represents a ValidatorPreDepositedOnBeaconChain event raised by the PermissionlessPool contract.
type PermissionlessPoolValidatorPreDepositedOnBeaconChain struct {
	PubKey []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterValidatorPreDepositedOnBeaconChain is a free log retrieval operation binding the contract event 0xa35366ad083efbaee7949ff15c68508b95e2c0441248e80d73da97ac82bc1f10.
//
// Solidity: event ValidatorPreDepositedOnBeaconChain(bytes pubKey)
func (_PermissionlessPool *PermissionlessPoolFilterer) FilterValidatorPreDepositedOnBeaconChain(opts *bind.FilterOpts) (*PermissionlessPoolValidatorPreDepositedOnBeaconChainIterator, error) {

	logs, sub, err := _PermissionlessPool.contract.FilterLogs(opts, "ValidatorPreDepositedOnBeaconChain")
	if err != nil {
		return nil, err
	}
	return &PermissionlessPoolValidatorPreDepositedOnBeaconChainIterator{contract: _PermissionlessPool.contract, event: "ValidatorPreDepositedOnBeaconChain", logs: logs, sub: sub}, nil
}

// WatchValidatorPreDepositedOnBeaconChain is a free log subscription operation binding the contract event 0xa35366ad083efbaee7949ff15c68508b95e2c0441248e80d73da97ac82bc1f10.
//
// Solidity: event ValidatorPreDepositedOnBeaconChain(bytes pubKey)
func (_PermissionlessPool *PermissionlessPoolFilterer) WatchValidatorPreDepositedOnBeaconChain(opts *bind.WatchOpts, sink chan<- *PermissionlessPoolValidatorPreDepositedOnBeaconChain) (event.Subscription, error) {

	logs, sub, err := _PermissionlessPool.contract.WatchLogs(opts, "ValidatorPreDepositedOnBeaconChain")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PermissionlessPoolValidatorPreDepositedOnBeaconChain)
				if err := _PermissionlessPool.contract.UnpackLog(event, "ValidatorPreDepositedOnBeaconChain", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorPreDepositedOnBeaconChain is a log parse operation binding the contract event 0xa35366ad083efbaee7949ff15c68508b95e2c0441248e80d73da97ac82bc1f10.
//
// Solidity: event ValidatorPreDepositedOnBeaconChain(bytes pubKey)
func (_PermissionlessPool *PermissionlessPoolFilterer) ParseValidatorPreDepositedOnBeaconChain(log types.Log) (*PermissionlessPoolValidatorPreDepositedOnBeaconChain, error) {
	event := new(PermissionlessPoolValidatorPreDepositedOnBeaconChain)
	if err := _PermissionlessPool.contract.UnpackLog(event, "ValidatorPreDepositedOnBeaconChain", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
